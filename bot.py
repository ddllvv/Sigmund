import os
import random
import logging
import traceback
from pyrogram import Client, filters
from pyrogram.errors import RPCError
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ–∑–æ–≤
DIAGNOSIS_DATA = {
    1: {
        "problems": ["–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ", "–ó—É–¥", "–ò–∫–æ—Ç–∞"],
        "parts": ["—É—Ö–∞", "–Ω–æ—Å–∞", "–ø–∞–ª—å—Ü–∞"],
        "severity": ["–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏"]
    },
    2: {
        "problems": ["–ü–∞—Ä–∞–ª–∏—á", "–ì–∞—Å—Ç—Ä–∏—Ç", "–ê—Ä–∏—Ç–º–∏—è"],
        "parts": ["—Ä–µ–±—Ä–∞", "–∫–æ–ª–µ–Ω–∞", "—Å–µ–ª–µ–∑—ë–Ω–∫–∏"],
        "severity": ["—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏"]
    },
    3: {
        "problems": ["–ì–∞–Ω–≥—Ä–µ–Ω–∞", "–î–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–¢—Ä–æ–º–±–æ–∑"],
        "parts": ["–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞", "–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã", "—è–∏—á–∫–∞"],
        "severity": ["—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏"]
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
pyro_client = Client(
    "my_session",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

class ChatManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–æ–≤"""
    def __init__(self):
        self.members = {}

    async def update_members(self, chat_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π ID"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ID –¥–ª—è Pyrogram
            pyro_chat_id = self.convert_chat_id(chat_id)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ {chat_id} -> {pyro_chat_id}")

            async with pyro_client:
                members = []
                async for member in pyro_client.get_chat_members(pyro_chat_id):
                    user = member.user
                    if not user.is_bot:
                        members.append(user)
                        logger.debug(f"–ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫: {user.username or user.first_name}")
                
                self.members[chat_id] = members
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")

        except RPCError as e:
            error_msg = f"Pyrogram Error: {str(e)}"
            if "CHAT_ADMIN_REQUIRED" in str(e):
                error_msg += "\n‚ùó –ë–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
            logger.error(error_msg)
            raise Exception(error_msg)

    def convert_chat_id(self, chat_id: int) -> int:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ID —á–∞—Ç–∞ –¥–ª—è Pyrogram"""
        if chat_id < 0:
            return int(f"-100{abs(chat_id)}")
        return chat_id

chat_manager = ChatManager()

def generate_diagnosis(level: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞"""
    data = DIAGNOSIS_DATA.get(level, DIAGNOSIS_DATA[2])
    return (
        f"{random.choice(data['problems'])} "
        f"{random.choice(data['parts'])} "
        f"{random.choice(data['severity'])}"
    ).capitalize()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    text = (
        "üë®‚öïÔ∏è –ë–æ—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/diagnose [—É—Ä–æ–≤–µ–Ω—å] - –≤–∞—à –¥–∏–∞–≥–Ω–æ–∑\n"
        "/dg @—é–∑–µ—Ä [—É—Ä–æ–≤–µ–Ω—å] - –¥–∏–∞–≥–Ω–æ–∑ —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
        "/rf - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        "–£—Ä–æ–≤–Ω–∏: 1-3 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/dg @user 3\n"
        "/diagnose 1"
    )
    await message.reply(text)

@dp.message_handler(commands=['rf'])
async def refresh(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞"""
    try:
        chat_id = message.chat.id
        await chat_manager.update_members(chat_id)
        
        members = chat_manager.members.get(chat_id, [])
        member_list = "\n".join([f"‚Ä¢ {m.username or m.first_name}" for m in members]) or "–ü—É—Å—Ç–æ"
        
        await message.reply(
            f"üîÑ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}\n"
            f"–°–ø–∏—Å–æ–∫:\n{member_list}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {traceback.format_exc()}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['diagnose'])
async def self_diagnose(message: types.Message):
    """–î–∏–∞–≥–Ω–æ–∑ –¥–ª—è —Å–µ–±—è"""
    try:
        args = message.get_args().split()
        level = 2
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω—è
        if args and args[0].isdigit():
            level = max(1, min(3, int(args[0])))
        
        diagnosis = generate_diagnosis(level)
        await message.reply(f"ü©∫ –í–∞—à –¥–∏–∞–≥–Ω–æ–∑ (—É—Ä–æ–≤–µ–Ω—å {level}):\n{diagnosis}!")
        
    except Exception as e:
        logger.error(traceback.format_exc())
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

@dp.message_handler(commands=['dg'])
async def user_diagnose(message: types.Message):
    """–î–∏–∞–≥–Ω–æ–∑ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        chat_id = message.chat.id
        args = message.get_args().split()
        
        if not args:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        target_username = args[0].lstrip('@').lower()
        level = 2
        
        if len(args) > 1 and args[1].isdigit():
            level = max(1, min(3, int(args[1])))
        
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        members = chat_manager.members.get(chat_id, [])
        user = next(
            (u for u in members 
             if u.username and u.username.lower() == target_username),
            None
        )
        
        if not user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return
            
        diagnosis = generate_diagnosis(level)
        await message.reply(
            f"üîç –î–∏–∞–≥–Ω–æ–∑ –¥–ª—è @{user.username} (—É—Ä–æ–≤–µ–Ω—å {level}):\n"
            f"{diagnosis}!"
        )
        
    except Exception as e:
        logger.error(traceback.format_exc())
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
