import os
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

TOKEN = os.getenv('TELEGRAM_TOKEN')

DIAGNOSIS_DATA = {
    1: {
        'problems': ['–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ', '–ó—É–¥', '–ò–∫–æ—Ç–∞'],
        'parts': ['—É—Ö–∞', '–Ω–æ—Å–∞', '–ø–∞–ª—å—Ü–∞'],
        'severity': ['–ª—ë–≥–∫–æ–π —Ñ–æ—Ä–º—ã']
    },
    2: {
        'problems': ['–ü–∞—Ä–∞–ª–∏—á', '–ì–∞—Å—Ç—Ä–∏—Ç', '–ê—Ä–∏—Ç–º–∏—è'],
        'parts': ['—Ä–µ–±—Ä–∞', '–∫–æ–ª–µ–Ω–∞', '—Å–µ–ª–µ–∑—ë–Ω–∫–∏'],
        'severity': ['—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏']
    },
    3: {
        'problems': ['–ì–∞–Ω–≥—Ä–µ–Ω–∞', '–î–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', '–¢—Ä–æ–º–±–æ–∑'],
        'parts': ['–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞', '–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã', '—è–∏—á–∫–∞'],
        'severity': ['—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏']
    }
}

async def get_active_members(chat_id, bot):
    members = []
    async for member in bot.get_chat_members(chat_id):
        if not member.user.is_bot and member.user.username:
            members.append(member.user)
    return members

async def generate_diagnosis(level):
    data = DIAGNOSIS_DATA[max(1, min(3, level))]
    return (
        f"{random.choice(data['problems'])} "
        f"{random.choice(data['parts'])} "
        f"{random.choice(data['severity'])}"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üë®‚öïÔ∏è –ë–æ—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/diagnose [1-3] - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑ —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
        "–ü—Ä–∏–º–µ—Ä: /diagnose 3"
    )

async def diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type not in ['group', 'supergroup']:
        return
    
    try:
        members = await get_active_members(update.effective_chat.id, context.bot)
        if not members:
            await update.message.reply_text("üòï –í —á–∞—Ç–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return

        user = random.choice(members)
        level = int(context.args[0]) if context.args else 2
        diagnosis = await generate_diagnosis(level)

        await update.message.reply_text(
            f"üîç –î–∏–∞–≥–Ω–æ–∑ –¥–ª—è @{user.username}:\n"
            f"{diagnosis.capitalize()}!"
        )
        
    except Exception:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                                      "1. –Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                                      "2. –í —á–∞—Ç–µ –µ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("diagnose", diagnose))
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    if not TOKEN:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º TELEGRAM_TOKEN!")
        exit(1)
    main()
