import os
import logging
from flask import Flask, request
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ–∑–æ–≤
DIAGNOSIS_DATA = {
    "diseases": {
        "–º—è–≥–∫–∏–π": ["–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ", "–ó—É–¥", "–õ–µ–≥–∫–æ–µ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ", "–ò–∫–æ—Ç–∞"],
        "—Å—Ä–µ–¥–Ω–∏–π": ["–ü–∞—Ä–∞–ª–∏—á", "–ì–∞—Å—Ç—Ä–∏—Ç", "–ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–∑", "–ê—Ä–∏—Ç–º–∏—è"],
        "–∂–µ—Å—Ç–∫–∏–π": ["–ù–µ–¥–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è", "–î–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–¢—Ä–æ–º–±–æ–∑"]
    },
    "body_parts": {
        "–º—è–≥–∫–∏–π": ["—É—Ö–∞", "–Ω–æ—Å–∞", "–ø–∞–ª—å—Ü–∞"],
        "—Å—Ä–µ–¥–Ω–∏–π": ["—Ä–µ–±—Ä–∞", "–∫–æ–ª–µ–Ω–∞", "–ª–æ–∫—Ç—è"],
        "–∂–µ—Å—Ç–∫–∏–π": ["–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞", "—Å–µ–ª–µ–∑–µ–Ω–∫–∏", "–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã"]
    },
    "severity": {
        "–º—è–≥–∫–∏–π": ["–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏", "–ª–µ–≥–∫–æ–π —Ñ–æ—Ä–º—ã"],
        "—Å—Ä–µ–¥–Ω–∏–π": ["–≤—Ç–æ—Ä–æ–π —Å—Ç–µ–ø–µ–Ω–∏", "—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏"],
        "–∂–µ—Å—Ç–∫–∏–π": ["—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏", "—Å –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è–º–∏"]
    },
    "modifiers": {
        "–∂–µ—Å—Ç–∫–∏–π": ["–≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è", "—Å –º–µ—Ç–∞—Å—Ç–∞–∑–∞–º–∏"]
    }
}

app = Flask(__name__)
application = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∏–∞–≥–Ω–æ–∑–æ–≤
def generate_diagnosis(severity_level):
    import random
    
    disease = random.choice(DIAGNOSIS_DATA["diseases"][severity_level])
    body_part = random.choice(DIAGNOSIS_DATA["body_parts"][severity_level])
    severity = random.choice(DIAGNOSIS_DATA["severity"][severity_level])
    
    modifier = ""
    if severity_level == "–∂–µ—Å—Ç–∫–∏–π" and random.random() < 0.5:
        modifier = ", " + random.choice(DIAGNOSIS_DATA["modifiers"]["–∂–µ—Å—Ç–∫–∏–π"])
    
    templates = [
        f"{disease} {body_part} {severity}{modifier}",
        f"–î–∏–∞–≥–Ω–æ–∑: {disease} {body_part}{modifier} ({severity})"
    ]
    
    return random.choice(templates)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_random_member(chat_id, context):
    members = []
    async for member in context.bot.get_chat_members(chat_id):
        if not member.user.is_bot:
            members.append(member.user)
    return random.choice(members) if members else None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diagnose
async def diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    severity_level = "—Å—Ä–µ–¥–Ω–∏–π"
    if context.args:
        level = context.args[0].lower()
        if level in ["–º—è–≥–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–∂–µ—Å—Ç–∫–∏–π"]:
            severity_level = level
    
    user = await get_random_member(update.effective_chat.id, context)
    if not user:
        await update.message.reply_text("–í —á–∞—Ç–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üò¢")
        return
    
    diagnosis = generate_diagnosis(severity_level)
    response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è @{user.username}:\n{diagnosis}"
    await update.message.reply_text(response)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("diagnose", diagnose))

# –í–µ–±—Ö—É–∫ –¥–ª—è PythonAnywhere
@app.route('/' + os.getenv('TELEGRAM_TOKEN'), methods=['POST'])
async def webhook():
    await application.update_queue.put(
        Update.de_json(data=request.json, bot=application.bot)
    return 'ok', 200

@app.route('/')
def index():
    return 'Diagnosis Bot is running!'

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not os.getenv('PYTHONANYWHERE_DOMAIN'):
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
        application.run_polling()
    else:
        # –ó–∞–ø—É—Å–∫ –Ω–∞ PythonAnywhere
        domain = os.getenv('PYTHONANYWHERE_DOMAIN')
        application.run_webhook(
            listen='0.0.0.0',
            port=5000,
            url_path=os.getenv('TELEGRAM_TOKEN'),
            webhook_url=f'https://{domain}/{os.getenv('TELEGRAM_TOKEN')}'
)
