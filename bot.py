import os
import random
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ChatMemberHandler,
    ChatJoinRequestHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")

DIAGNOSIS_DATA = {
    1: {
        "problems": ["–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ", "–ó—É–¥", "–ò–∫–æ—Ç–∞"],
        "parts": ["—É—Ö–∞", "–Ω–æ—Å–∞", "–ø–∞–ª—å—Ü–∞"],
        "severity": ["–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏"]
    },
    2: {
        "problems": ["–ü–∞—Ä–∞–ª–∏—á", "–ì–∞—Å—Ç—Ä–∏—Ç", "–ê—Ä–∏—Ç–º–∏—è"],
        "parts": ["—Ä–µ–±—Ä–∞", "–∫–æ–ª–µ–Ω–∞", "—Å–µ–ª–µ–∑—ë–Ω–∫–∏"],
        "severity": ["—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏"]
    },
    3: {
        "problems": ["–ì–∞–Ω–≥—Ä–µ–Ω–∞", "–î–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–¢—Ä–æ–º–±–æ–∑"],
        "parts": ["–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞", "–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã", "—è–∏—á–∫–∞"],
        "severity": ["—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏"]
    }
}

class ChatData:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —á–∞—Ç–∞"""
    def __init__(self):
        self.members = {}
        self.last_update = {}

    async def update_members(self, chat_id: int, bot, force: bool = False):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            if not force and not self.needs_update(chat_id):
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            is_admin = await self._is_admin(bot, chat_id)
            members = []

            if is_admin:
                logger.info("üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                async for member in bot.get_chat_members(chat_id):
                    user = member.user
                    if not user.is_bot:
                        members.append(user)
                        logger.info(f"üë§ –î–æ–±–∞–≤–ª–µ–Ω: {user.username or user.full_name}")
            else:
                logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥")
                async for message in bot.get_chat_history(chat_id, limit=200):
                    user = message.from_user
                    if user and not user.is_bot and user not in members:
                        members.append(user)

            self.members[chat_id] = members
            self.last_update[chat_id] = datetime.now()
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            await self._fallback_update(chat_id, bot)

    async def _is_admin(self, bot, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            me = await bot.get_me()
            admins = await bot.get_chat_administrators(chat_id)
            return any(admin.user.id == me.id for admin in admins)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")
            return False

    def needs_update(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        last = self.last_update.get(chat_id)
        return not last or (datetime.now() - last) > timedelta(minutes=30)

chat_data = ChatData()

async def handle_chat_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞"""
    try:
        chat_id = update.effective_chat.id
        await chat_data.update_members(chat_id, context.bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")

async def refresh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        chat_id = update.effective_chat.id
        await chat_data.update_members(chat_id, context.bot, force=True)
        
        members = chat_data.members.get(chat_id, [])
        member_list = "\n".join([f"‚Ä¢ {m.username or m.full_name}" for m in members]) or "–ü—É—Å—Ç–æ"
        
        await update.message.reply_text(
            f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}\n"
            f"–°–ø–∏—Å–æ–∫:\n{member_list}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞")

async def self_diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–∏–∞–≥–Ω–æ–∑ –¥–ª—è —Å–µ–±—è"""
    try:
        user = update.effective_user
        args = context.args or []
        level = 2

        # –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω—è
        for arg in args:
            if arg.isdigit() and 1 <= int(arg) <= 3:
                level = int(arg)

        data = DIAGNOSIS_DATA.get(level, DIAGNOSIS_DATA[2])
        diagnosis = (
            f"{random.choice(data['problems'])} "
            f"{random.choice(data['parts'])} "
            f"{random.choice(data['severity'])}"
        ).capitalize()

        await update.message.reply_text(
            f"ü©∫ –î–∏–∞–≥–Ω–æ–∑ –¥–ª—è @{user.username} (—É—Ä–æ–≤–µ–Ω—å {level}):\n"
            f"{diagnosis}!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ–∑–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

async def user_diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–∏–∞–≥–Ω–æ–∑ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        chat = update.effective_chat
        args = context.args or []
        
        if chat.type not in ["group", "supergroup"]:
            await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        await chat_data.update_members(chat.id, context.bot)
        members = chat_data.members.get(chat.id, [])

        # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user = None
        level = 2
        
        for arg in args:
            if arg.startswith("@"):
                search_username = arg[1:].lower()
                target_user = next(
                    (u for u in members 
                     if u.username and u.username.lower() == search_username),
                    None
                )
            elif arg.isdigit() and 1 <= int(arg) <= 3:
                level = int(arg)

        if not target_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        data = DIAGNOSIS_DATA.get(level, DIAGNOSIS_DATA[2])
        diagnosis = (
            f"{random.choice(data['problems'])} "
            f"{random.choice(data['parts'])} "
            f"{random.choice(data['severity'])}"
        ).capitalize()

        username = f"@{target_user.username}" if target_user.username else target_user.full_name
        await update.message.reply_text(
            f"üîç –î–∏–∞–≥–Ω–æ–∑ –¥–ª—è {username} (—É—Ä–æ–≤–µ–Ω—å {level}):\n"
            f"{diagnosis}!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ–∑–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    help_text = (
        "üë®‚öïÔ∏è –ë–æ—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/diagnose [—É—Ä–æ–≤–µ–Ω—å] - –≤–∞—à –¥–∏–∞–≥–Ω–æ–∑\n"
        "/dg @—é–∑–µ—Ä [—É—Ä–æ–≤–µ–Ω—å] - –¥–∏–∞–≥–Ω–æ–∑ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "/rf - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/diagnose 3 - –≤–∞—à –¥–∏–∞–≥–Ω–æ–∑ —É—Ä–æ–≤–Ω—è 3\n"
        "/dg @user 2 - –¥–∏–∞–≥–Ω–æ–∑ —É—Ä–æ–≤–Ω—è 2 –¥–ª—è @user"
    )
    await update.message.reply_text(help_text)

def main():
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = [
        CommandHandler("start", start),
        CommandHandler("diagnose", self_diagnose),
        CommandHandler("dg", user_diagnose),
        CommandHandler("rf", refresh),
        ChatMemberHandler(handle_chat_event),
        ChatJoinRequestHandler(handle_chat_event)
    ]
    
    application.add_handlers(handlers)
    application.run_polling(
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES
    )

if __name__ == "__main__":
    if not TOKEN:
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN!")
        exit(1)
    main()
