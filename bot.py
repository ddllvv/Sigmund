import os
import random
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ë–∞–∑–∞ –¥–∏–∞–≥–Ω–æ–∑–æ–≤
DIAGNOSIS_DB = {
    1: {
        'problems': ['–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ', '–ó—É–¥', '–ò–∫–æ—Ç–∞'],
        'parts': ['—É—Ö–∞', '–Ω–æ—Å–∞', '–ø–∞–ª—å—Ü–∞'],
        'severity': ['–ª—ë–≥–∫–æ–π —Ñ–æ—Ä–º—ã', '–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏']
    },
    2: {
        'problems': ['–ü–∞—Ä–∞–ª–∏—á', '–ì–∞—Å—Ç—Ä–∏—Ç', '–ê—Ä–∏—Ç–º–∏—è'],
        'parts': ['—Ä–µ–±—Ä–∞', '–∫–æ–ª–µ–Ω–∞', '—Å–µ–ª–µ–∑—ë–Ω–∫–∏'],
        'severity': ['—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏', '–æ—Å—Ç—Ä–æ–π —Ñ–æ—Ä–º—ã']
    },
    3: {
        'problems': ['–ì–∞–Ω–≥—Ä–µ–Ω–∞', '–î–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', '–¢—Ä–æ–º–±–æ–∑'],
        'parts': ['–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞', '–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã', '—è–∏—á–∫–∞'],
        'severity': ['—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏', '—Å –º–µ—Ç–∞—Å—Ç–∞–∑–∞–º–∏']
    }
}

async def get_random_member(chat_id, bot):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞"""
    try:
        members = []
        async for member in bot.get_chat_members(chat_id):
            user = member.user
            if not user.is_bot and (user.username or user.first_name):
                members.append(user)
        return random.choice(members) if members else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return None

async def generate_diagnosis(level: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑"""
    level = max(1, min(3, level))
    data = DIAGNOSIS_DB[level]
    return (
        f"{random.choice(data['problems'])} "
        f"{random.choice(data['parts'])} "
        f"{random.choice(data['severity'])}"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    help_text = (
        "ü©∫ –ë–æ—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø!\n"
        "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/diagnose [1-3] - —Å–ª—É—á–∞–π–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
        "–ü—Ä–∏–º–µ—Ä: /diagnose 3"
    )
    await update.message.reply_text(help_text)

async def diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diagnose"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞
        if update.effective_chat.type not in ['group', 'supergroup']:
            await update.message.reply_text("‚ùå –†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_random_member(
            update.effective_chat.id, 
            context.bot
        )
        if not user:
            await update.message.reply_text("üò¢ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        try:
            level = int(context.args[0]) if context.args else 2
        except:
            level = 2
        level = max(1, min(3, level))

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ–∑
        diagnosis = await generate_diagnosis(level)
        username = f"@{user.username}" if user.username else user.first_name

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {username}:\n"
            f"–î–∏–∞–≥–Ω–æ–∑: {diagnosis.capitalize()}!"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("diagnose", diagnose))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
    application.run_polling()

if __name__ == '__main__':
    if not TOKEN:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN!")
        exit(1)
    main()
