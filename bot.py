import os
import random
import logging
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TELEGRAM_TOKEN')
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram Bot
application = Application.builder().token(TOKEN).build()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ (—É—Ä–æ–≤–Ω–∏ 1-3)
DIAGNOSIS_DATA = {
    1: {
        "diseases": ["–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ", "–ó—É–¥", "–õ–µ–≥–∫–æ–µ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ", "–ò–∫–æ—Ç–∞"],
        "body_parts": ["—É—Ö–∞", "–Ω–æ—Å–∞", "–ø–∞–ª—å—Ü–∞"],
        "severity": ["–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏", "–ª–µ–≥–∫–æ–π —Ñ–æ—Ä–º—ã"]
    },
    2: {
        "diseases": ["–ü–∞—Ä–∞–ª–∏—á", "–ì–∞—Å—Ç—Ä–∏—Ç", "–ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–∑", "–ê—Ä–∏—Ç–º–∏—è"],
        "body_parts": ["—Ä–µ–±—Ä–∞", "–∫–æ–ª–µ–Ω–∞", "–ª–æ–∫—Ç—è"],
        "severity": ["–≤—Ç–æ—Ä–æ–π —Å—Ç–µ–ø–µ–Ω–∏", "—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏"]
    },
    3: {
        "diseases": ["–ù–µ–¥–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è", "–î–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–¢—Ä–æ–º–±–æ–∑"],
        "body_parts": ["–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞", "—Å–µ–ª–µ–∑–µ–Ω–∫–∏", "–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã"],
        "severity": ["—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏", "—Å –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è–º–∏"],
        "modifiers": ["–≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è", "—Å –º–µ—Ç–∞—Å—Ç–∞–∑–∞–º–∏"]
    }
}

def generate_diagnosis(level: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    level = max(1, min(3, level))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å 1-3
    level_data = DIAGNOSIS_DATA[level]
    
    diagnosis = (
        f"{random.choice(level_data['diseases'])} "
        f"{random.choice(level_data['body_parts'])} "
        f"{random.choice(level_data['severity'])}"
    )
    
    if level == 3 and random.random() < 0.5:
        diagnosis += f", {random.choice(level_data['modifiers'])}"
    
    return diagnosis

async def diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diagnose"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
        level = int(context.args[0]) if context.args else 2
    except (ValueError, IndexError):
        level = 2
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {update.effective_user.id} —Å —É—Ä–æ–≤–Ω–µ–º {level}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ–∑
    diagnosis = generate_diagnosis(level)
    response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç (—É—Ä–æ–≤–µ–Ω—å {level}):\n{diagnosis}"
    await update.message.reply_text(response)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler("diagnose", diagnose))

@app.route('/webhook', methods=['POST'])
async def webhook():
    """Endpoint –¥–ª—è –≤–µ–±—Ö—É–∫–∞ Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        update = Update.de_json(await request.get_json(), application.bot)
        await application.update_queue.put(update)
        return '', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return '', 500

@app.route('/')
def index():
    """–ü—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return 'Telegram Diagnosis Bot is running!'

if __name__ == '__main__':
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Render
    PORT = int(os.environ.get('PORT', 5000))
    WEBHOOK_URL = os.environ.get('WEBHOOK_URL', '')
    
    if WEBHOOK_URL:
        # –†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞ (–ø—Ä–æ–¥–∞–∫—à–µ–Ω)
        application.run_webhook(
            listen='0.0.0.0',
            port=PORT,
            url_path=TOKEN,
            webhook_url=f'{WEBHOOK_URL}/webhook'
        )
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        application.run_polling()
