import os
import random
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import BadRequest, Forbidden

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_TOKEN')

DIAGNOSIS_DATA = {
    1: {
        'problems': ['–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ', '–ó—É–¥', '–ò–∫–æ—Ç–∞'],
        'parts': ['—É—Ö–∞', '–Ω–æ—Å–∞', '–ø–∞–ª—å—Ü–∞'],
        'severity': ['–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏']
    },
    2: {
        'problems': ['–ü–∞—Ä–∞–ª–∏—á', '–ì–∞—Å—Ç—Ä–∏—Ç', '–ê—Ä–∏—Ç–º–∏—è'],
        'parts': ['—Ä–µ–±—Ä–∞', '–∫–æ–ª–µ–Ω–∞', '—Å–µ–ª–µ–∑—ë–Ω–∫–∏'],
        'severity': ['—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏']
    },
    3: {
        'problems': ['–ì–∞–Ω–≥—Ä–µ–Ω–∞', '–î–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', '–¢—Ä–æ–º–±–æ–∑'],
        'parts': ['–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞', '–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã', '—è–∏—á–∫–∞'],
        'severity': ['—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏']
    }
}

async def get_chat_members_safe(bot, chat_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        members = []
        async for member in bot.get_chat_members(chat_id):
            user = member.user
            if not user.is_bot:
                members.append(user)
                logger.debug(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (ID: {user.id}, @{user.username})")
        return members
    except Forbidden as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e.message}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str(e)}")
        return []

async def generate_diagnosis(level: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–≥–Ω–æ–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    level = max(1, min(3, level))
    data = DIAGNOSIS_DATA[level]
    return (
        f"{random.choice(data['problems'])} "
        f"{random.choice(data['parts'])} "
        f"{random.choice(data['severity'])}"
    ).capitalize()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    help_text = (
        "üë®‚öïÔ∏è –ë–æ—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/diagnose [@—é–∑–µ—Ä] [—É—Ä–æ–≤–µ–Ω—å 1-3] - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑\n"
        "/check_rights - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/diagnose 2 - —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
        "/diagnose @username 3 - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
    )
    await update.message.reply_text(help_text)

async def check_rights(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ"""
    try:
        chat_member = await context.bot.get_chat_member(
            chat_id=update.effective_chat.id,
            user_id=context.bot.id
        )
        
        rights_info = (
            f"–°—Ç–∞—Ç—É—Å: {chat_member.status}\n"
            f"–ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Ç–æ–º: {chat_member.can_manage_chat}\n"
            f"–í–∏–¥–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat_member.can_manage_chat}\n"
            f"–ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {chat_member.can_read_all_messages}"
        )
        
        await update.message.reply_text(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:\n{rights_info}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤")

async def diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diagnose"""
    try:
        chat = update.effective_chat
        args = context.args
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {update.effective_user.id} –≤ —á–∞—Ç–µ {chat.id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞
        if chat.type not in ['group', 'supergroup']:
            await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        members = await get_chat_members_safe(context.bot, chat.id)
        
        if members is None:
            await update.message.reply_text("üîí –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
            return
            
        if not members:
            await update.message.reply_text("üò¢ –í —á–∞—Ç–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        target_user = None
        level = 2
        
        if args:
            # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for i, arg in enumerate(args):
                if arg.startswith('@'):
                    username = arg[1:].lower()
                    target_user = next((u for u in members if u.username and u.username.lower() == username), None)
                    if target_user:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        if len(args) > i+1:
                            try: level = int(args[i+1])
                            except: pass
                        break
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ —É—Ä–æ–≤–µ–Ω—å
            if not target_user:
                try: level = int(args[0])
                except: pass

        # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if not target_user:
            target_user = random.choice(members)
            logger.info(f"–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user.id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
        level = max(1, min(3, level))
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ–∑–∞
        diagnosis = await generate_diagnosis(level)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        username = f"@{target_user.username}" if target_user.username else target_user.full_name
        response = (
            f"üîç –î–∏–∞–≥–Ω–æ–∑ –¥–ª—è {username} (—É—Ä–æ–≤–µ–Ω—å {level}):\n"
            f"{diagnosis}!"
        )
        
        await update.message.reply_text(response)

    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("check_rights", check_rights))
    application.add_handler(CommandHandler("diagnose", diagnose))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES,
        close_loop=False
    )

if __name__ == '__main__':
    if not TOKEN:
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN!")
        exit(1)
    main()
