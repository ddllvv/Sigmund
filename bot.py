import os
import random
import logging
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ChatType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get('TELEGRAM_TOKEN')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')

if not TOKEN or not WEBHOOK_URL:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()

# –ë–∞–∑–∞ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
DIAGNOSIS_DATA = {
    1: {
        "problems": [
            "–ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ {body_part} {severity}",
            "–∑—É–¥ {body_part} {severity}",
            "–ª–µ–≥–∫–æ–µ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ {body_part} {severity}"
        ],
        "body_parts": ["—É—Ö–∞", "–Ω–æ—Å–∞", "–ø–∞–ª—å—Ü–∞"],
        "severity": ["–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏", "–ª–µ–≥–∫–æ–π —Ñ–æ—Ä–º—ã"]
    },
    2: {
        "problems": [
            "–ø–∞—Ä–∞–ª–∏—á {body_part} {severity}",
            "–≥–∞—Å—Ç—Ä–∏—Ç {body_part} {severity}",
            "–ø–∞—Ä–æ–¥–æ–Ω—Ç–æ–∑ {body_part} {severity}"
        ],
        "body_parts": ["—Ä–µ–±—Ä–∞", "–∫–æ–ª–µ–Ω–∞", "–ª–æ–∫—Ç—è"],
        "severity": ["–≤—Ç–æ—Ä–æ–π —Å—Ç–µ–ø–µ–Ω–∏", "—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏"]
    },
    3: {
        "problems": [
            "–Ω–µ–¥–æ—Ä–∞–∑–≤–∏—Ç–∏–µ {body_part} {severity}",
            "–≥–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è {body_part} {severity}",
            "–¥–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è {body_part} {severity}"
        ],
        "body_parts": ["–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞", "—Å–µ–ª–µ–∑–µ–Ω–∫–∏", "–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã"],
        "severity": ["—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏", "—Å –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è–º–∏"],
        "modifiers": ["–≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è", "—Å –º–µ—Ç–∞—Å—Ç–∞–∑–∞–º–∏"]
    }
}

def generate_diagnosis(level: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ–∑–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º"""
    level = max(1, min(3, level))
    data = DIAGNOSIS_DATA[level]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–æ–±–ª–µ–º—ã
    problem_template = random.choice(data["problems"])
    
    # –í—ã–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ –∏ —Å—Ç–µ–ø–µ–Ω—å
    body_part = random.choice(data["body_parts"])
    severity = random.choice(data["severity"])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ–∑
    diagnosis = problem_template.format(
        body_part=body_part,
        severity=severity
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è 3 —É—Ä–æ–≤–Ω—è
    if level == 3 and random.random() < 0.5:
        diagnosis += " " + random.choice(data["modifiers"])
    
    return diagnosis

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    help_text = (
        "üîÆ –ë–æ—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç –¥–ª—è —á–∞—Ç–æ–≤!\n"
        "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/diagnose [1-3] - —Å–ª—É—á–∞–π–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/diagnose - —Å—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å\n"
        "/diagnose 3 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∂–µ—Å—Ç–∫–æ—Å—Ç—å"
    )
    await update.message.reply_text(help_text)

async def get_random_member(chat_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞"""
    try:
        members = []
        async for member in application.bot.get_chat_members(chat_id):
            user = member.user
            if not user.is_bot and (user.username or user.first_name):
                members.append(user)
        return random.choice(members) if members else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        return None

async def diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diagnose"""
    try:
        if update.effective_chat.type == ChatType.PRIVATE:
            await update.message.reply_text("‚ùå –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        level = int(context.args[0]) if context.args else 2
        level = max(1, min(3, level))

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        user = await get_random_member(update.effective_chat.id)
        if not user:
            await update.message.reply_text("üò¢ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ–∑
        diagnosis = generate_diagnosis(level)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        username = f"@{user.username}" if user.username else user.first_name
        response = f"‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã—è–≤–∏–ª–∞:\n—É {username} {diagnosis.capitalize()}!"
        
        await update.message.reply_text(response)

    except (ValueError, IndexError):
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /diagnose [1-3]")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("üö® –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("diagnose", diagnose))

@app.route('/webhook', methods=['POST'])
async def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    try:
        data = await request.get_json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return '', 200
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return '', 500

@app.route('/')
def health_check():
    return "Diagnosis Bot API", 200

if __name__ == '__main__':
    application.run_webhook(
        listen='0.0.0.0',
        port=int(os.environ.get('PORT', 5000)),
        url_path=TOKEN,
        webhook_url=f"{WEBHOOK_URL}/webhook",
        drop_pending_updates=True
)
