import os
import random
import logging
from datetime import datetime, timedelta
from typing import Optional, List
from telegram import Update, User
from telegram.ext import Application, CommandHandler, ContextTypes, RetryAfter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")

DIAGNOSIS_DATA = { ... }  # –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

class MembersCache:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    def __init__(self):
        self._cache = {}
    
    def get(self, chat_id: int) -> Optional[List[User]]:
        entry = self._cache.get(chat_id)
        if entry and datetime.now() - entry['time'] < timedelta(minutes=30):
            return entry['members']
        return None
    
    def set(self, chat_id: int, members: List[User]):
        self._cache[chat_id] = {
            'time': datetime.now(),
            'members': members
        }

members_cache = MembersCache()

async def get_chat_members(bot, chat_id: int) -> Optional[List[User]]:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
        if cached := members_cache.get(chat_id):
            return cached
        
        members = []
        
        # –ú–µ—Ç–æ–¥ 1: –ò—Ç–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ get_chat_members (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞)
        try:
            async for member in bot.get_chat_members(chat_id):
                if not member.user.is_bot:
                    members.append(member.user)
            if members:
                members_cache.set(chat_id, members)
                return members
        except Exception as e:
            logger.warning(f"Method 1 failed: {e}")

        # –ú–µ—Ç–æ–¥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–º–µ–Ω—å—à–µ –ø—Ä–∞–≤)
        try:
            admins = await bot.get_chat_administrators(chat_id)
            members = [a.user for a in admins if not a.user.is_bot]
            if members:
                members_cache.set(chat_id, members)
                return members
        except Exception as e:
            logger.warning(f"Method 2 failed: {e}")

        # –ú–µ—Ç–æ–¥ 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        return None

    except RetryAfter as e:
        logger.warning(f"RetryAfter: {e}")
        await asyncio.sleep(e.retry_after)
        return await get_chat_members(bot, chat_id)
    
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return None

async def diagnose_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        chat = update.effective_chat
        user = update.effective_user
        args = context.args or []
        
        if chat.type not in ["group", "supergroup"]:
            await update.message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        level, target = 2, None
        for arg in args:
            if arg.isdigit() and 1 <= int(arg) <= 3:
                level = int(arg)
            elif arg.startswith('@'):
                target = arg[1:].lower()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        members = await get_chat_members(context.bot, chat.id)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selected_user = None
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é
        if target:
            selected_user = next((u for u in members if u.username and u.username.lower() == target), None)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not selected_user and update.message.reply_to_message:
            selected_user = update.message.reply_to_message.from_user
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if not selected_user and members:
            selected_user = random.choice(members)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã
        if not selected_user:
            selected_user = user
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏
        username = selected_user.username 
        name = f"@{username}" if username else selected_user.full_name
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ–∑–∞
        data = DIAGNOSIS_DATA.get(level, DIAGNOSIS_DATA[2])
        diagnosis = (
            f"{random.choice(data['problems'])} "
            f"{random.choice(data['parts'])} "
            f"{random.choice(data['severity'])}"
        ).capitalize()

        await update.message.reply_text(
            f"üîç –î–∏–∞–≥–Ω–æ–∑ –¥–ª—è {name} (—É—Ä–æ–≤–µ–Ω—å {level}):\n"
            f"{diagnosis}!"
        )

    except RetryAfter as e:
        await update.message.reply_text(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫.")
    
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

def main():
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    handlers = [
        CommandHandler("start", start),
        CommandHandler(["diagnose", "dg"], diagnose_command)
    ]
    
    application.add_handlers(handlers)
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    if not TOKEN:
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN!")
        exit(1)
    main()
