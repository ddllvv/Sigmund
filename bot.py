import os
import random
import logging
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
TOKEN = os.environ.get('TELEGRAM_TOKEN')
application = Application.builder().token(TOKEN).build()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
DIAGNOSIS_DATA = {
    "diseases": {
        1: ["–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ", "–ó—É–¥", "–õ–µ–≥–∫–æ–µ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ", "–ò–∫–æ—Ç–∞"],
        2: ["–ü–∞—Ä–∞–ª–∏—á", "–ì–∞—Å—Ç—Ä–∏—Ç", "–ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–∑", "–ê—Ä–∏—Ç–º–∏—è"],
        3: ["–ù–µ–¥–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è", "–î–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–¢—Ä–æ–º–±–æ–∑"]
    },
    "body_parts": {
        1: ["—É—Ö–∞", "–Ω–æ—Å–∞", "–ø–∞–ª—å—Ü–∞"],
        2: ["—Ä–µ–±—Ä–∞", "–∫–æ–ª–µ–Ω–∞", "–ª–æ–∫—Ç—è"],
        3: ["–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞", "—Å–µ–ª–µ–∑–µ–Ω–∫–∏", "–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã"]
    },
    "severity": {
        1: ["–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏", "–ª–µ–≥–∫–æ–π —Ñ–æ—Ä–º—ã"],
        2: ["–≤—Ç–æ—Ä–æ–π —Å—Ç–µ–ø–µ–Ω–∏", "—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏"],
        3: ["—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏", "—Å –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è–º–∏"]
    },
    "modifiers": {
        3: ["–≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è", "—Å –º–µ—Ç–∞—Å—Ç–∞–∑–∞–º–∏"]
    }
}

def generate_diagnosis(level: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–≥–Ω–æ–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    level = max(1, min(3, level))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è 1-3
    
    disease = random.choice(DIAGNOSIS_DATA["diseases"][level])
    body_part = random.choice(DIAGNOSIS_DATA["body_parts"][level])
    severity = random.choice(DIAGNOSIS_DATA["severity"][level])
    
    modifier = ""
    if level == 3 and random.random() < 0.5:
        modifier = ", " + random.choice(DIAGNOSIS_DATA["modifiers"][3])
    
    templates = [
        f"{disease} {body_part} {severity}{modifier}",
        f"–î–∏–∞–≥–Ω–æ–∑: {disease} {body_part}{modifier} ({severity})"
    ]
    return random.choice(templates)

async def get_random_member(chat_id, context):
    members = []
    async for member in context.bot.get_chat_members(chat_id):
        if not member.user.is_bot:
            members.append(member.user)
    return random.choice(members) if members else None

async def diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        level = int(context.args[0]) if context.args else 2
    except (ValueError, IndexError):
        level = 2
    
    user = await get_random_member(update.effective_chat.id, context)
    if not user:
        await update.message.reply_text("–í —á–∞—Ç–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üò¢")
        return
    
    diagnosis = generate_diagnosis(level)
    response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è @{user.username} (—É—Ä–æ–≤–µ–Ω—å {level}):\n{diagnosis}"
    await update.message.reply_text(response)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("diagnose", diagnose))

@app.route('/webhook', methods=['POST'])
async def webhook():
    await application.update_queue.put(
        Update.de_json(await request.get_json(), application.bot)
    )
    return '', 200

if __name__ == '__main__':
    PORT = int(os.environ.get('PORT', 5000))
    application.run_webhook(
        listen='0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=os.environ.get('WEBHOOK_URL') + '/webhook'
)
