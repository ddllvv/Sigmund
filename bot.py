import os
import random
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")

DIAGNOSIS_DATA = {
    1: {
        "problems": ["–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ", "–ó—É–¥", "–ò–∫–æ—Ç–∞"],
        "parts": ["—É—Ö–∞", "–Ω–æ—Å–∞", "–ø–∞–ª—å—Ü–∞"],
        "severity": ["–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏"]
    },
    2: {
        "problems": ["–ü–∞—Ä–∞–ª–∏—á", "–ì–∞—Å—Ç—Ä–∏—Ç", "–ê—Ä–∏—Ç–º–∏—è"],
        "parts": ["—Ä–µ–±—Ä–∞", "–∫–æ–ª–µ–Ω–∞", "—Å–µ–ª–µ–∑—ë–Ω–∫–∏"],
        "severity": ["—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏"]
    },
    3: {
        "problems": ["–ì–∞–Ω–≥—Ä–µ–Ω–∞", "–î–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–¢—Ä–æ–º–±–æ–∑"],
        "parts": ["–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞", "–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã", "—è–∏—á–∫–∞"],
        "severity": ["—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏"]
    }
}

async def get_chat_members(bot, chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –±–æ—Ç–æ–≤)"""
    try:
        members = []
        async for member in bot.get_chat_members(chat_id):
            if not member.user.is_bot:
                members.append(member.user)
        return members
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    help_text = (
        "üë®‚öïÔ∏è –ë–æ—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/dg [@—é–∑–µ—Ä] [—É—Ä–æ–≤–µ–Ω—å] - –¥–∏–∞–≥–Ω–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/random_dg [—É—Ä–æ–≤–µ–Ω—å] - —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
        "\n–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/random_dg 3 - —Å–ª—É—á–∞–π–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å —É—Ä–æ–≤–Ω–µ–º 3\n"
        "/dg @user 1 - –¥–∏–∞–≥–Ω–æ–∑ —É—Ä–æ–≤–Ω—è 1 –¥–ª—è @user"
    )
    await update.message.reply_text(help_text)

async def random_diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random_dg"""
    try:
        chat = update.effective_chat
        args = context.args or []
        
        if chat.type not in ["group", "supergroup"]:
            await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        members = await get_chat_members(context.bot, chat.id)
        if not members:
            await update.message.reply_text("üò¢ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω—è
        level = 2
        for arg in args:
            if arg.isdigit() and 1 <= int(arg) <= 3:
                level = int(arg)

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        random_user = random.choice(members)
        username = f"@{random_user.username}" if random_user.username else random_user.full_name

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ–∑–∞
        data = DIAGNOSIS_DATA.get(level, DIAGNOSIS_DATA[2])
        diagnosis = (
            f"{random.choice(data['problems'])} "
            f"{random.choice(data['parts'])} "
            f"{random.choice(data['severity'])}"
        ).capitalize()

        await update.message.reply_text(
            f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ –¥–ª—è {username} (—É—Ä–æ–≤–µ–Ω—å {level}):\n"
            f"{diagnosis}!"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

async def diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dg"""
    try:
        user = update.effective_user
        args = context.args or []
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ü–µ–ª—å - –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
        target_username = user.username or user.full_name
        display_name = f"@{user.username}" if user.username else user.full_name
        level = 2

        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        for arg in args:
            if arg.startswith("@"):
                target_username = arg
                display_name = arg
            elif arg.isdigit() and 1 <= int(arg) <= 3:
                level = int(arg)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ–∑–∞
        data = DIAGNOSIS_DATA.get(level, DIAGNOSIS_DATA[2])
        diagnosis = (
            f"{random.choice(data['problems'])} "
            f"{random.choice(data['parts'])} "
            f"{random.choice(data['severity'])}"
        ).capitalize()

        await update.message.reply_text(
            f"üîç –î–∏–∞–≥–Ω–æ–∑ –¥–ª—è {display_name} (—É—Ä–æ–≤–µ–Ω—å {level}):\n"
            f"{diagnosis}!"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("dg", diagnose))
    application.add_handler(CommandHandler("random_dg", random_diagnose))
    
    application.run_polling(
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES
    )

if __name__ == "__main__":
    if not TOKEN:
        logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        exit(1)
    main()
