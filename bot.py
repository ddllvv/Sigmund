import os
import sys
import random
import logging
from pyrogram import Client
from pyrogram.errors import RPCError
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.utils.exceptions import TerminatedByOtherGetUpdates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([API_ID, API_HASH, BOT_TOKEN]):
    logger.critical("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

DIAGNOSIS_DATA = {
    1: {
        "problems": [
            "–õ—ë–≥–∫–æ–µ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ", "–°–µ–∑–æ–Ω–Ω—ã–π –∑—É–¥", "–ò–∫–æ—Ç–∞", "–ù–∞—Å–º–æ—Ä–∫", 
            "–ß–∏—Ö–∞–Ω–∏–µ", "–ì–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ", "–õ–µ–≥–∫–∞—è –∏–∑–∂–æ–≥–∞", "–°–æ–Ω–ª–∏–≤–æ—Å—Ç—å",
            "–ú–µ—Ç–µ–æ—Ä–∏–∑–º", "–ò–∫–æ—Ç–∞", "–õ–µ–≥–∫–∞—è —Å—ã–ø—å", "–°–ª–µ–∑–æ—Ç–µ—á–µ–Ω–∏–µ",
            "–ó–∞–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å", "–õ–µ–≥–∫–∏–π –∫–∞—à–µ–ª—å", "–£–∫–∞—á–∏–≤–∞–Ω–∏–µ",
            "–õ–µ–≥–∫–∞—è –∞–ª–ª–µ—Ä–≥–∏—è", "–°—É–¥–æ—Ä–æ–≥–∞", "–®–µ–ª—É—à–µ–Ω–∏–µ"
        ],
        "parts": [
            "—É—Ö–∞", "–Ω–æ—Å–∞", "–º–∏–∑–∏–Ω—Ü–∞", "–≤–µ–∫–∞", "–∫–æ–ª–µ–Ω–Ω–æ–π —á–∞—à–µ—á–∫–∏",
            "–ª–æ–∫—Ç—è", "–ø—è—Ç–∫–∏", "–±—Ä–æ–≤–∏", "—è–∑—ã–∫–∞", "–ø—É–ø–∫–∞",
            "—É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–ª—å—Ü–∞", "–º–æ–∑–æ–ª–∏", "—â–µ–∫–∏", "–ø–æ–¥–±–æ—Ä–æ–¥–∫–∞",
            "–ø–µ—Ä–µ–Ω–æ—Å–∏—Ü—ã", "–Ω–æ–≥—Ç—è", "–∑–∞–ø—è—Å—Ç—å—è", "–≤–∏—Å–∫–∞", "–≥–æ—Ä—Ç–∞–Ω–∏",
            "–ª–∏–º—Ñ–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–∑–ª–∞"
        ],
        "severity": [
            "–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏", "–ª—ë–≥–∫–æ–π —Ñ–æ—Ä–º—ã", "—ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞",
            "—Å–µ–∑–æ–Ω–Ω–æ–≥–æ –æ–±–æ—Å—Ç—Ä–µ–Ω–∏—è", "–ø–æ—Å–ª–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –æ—Å—Ç—Ä–æ–π –ø–∏—â–∏",
            "–ø—Ä–∏ –∫–æ–Ω—Ç–∞–∫—Ç–µ —Å –∫–æ—à–∫–∞–º–∏", "–≤–æ –≤—Ä–µ–º—è —Ü–≤–µ—Ç–µ–Ω–∏—è –∞–º–±—Ä–æ–∑–∏–∏",
            "–ø–æ—Å–ª–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π", "–ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–≥–æ–¥—ã",
            "–ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ —Å–∏–¥–µ–Ω–∏—è"
        ]
    },
    2: {
        "problems": [
            "–ì–∞—Å—Ç—Ä–∏—Ç", "–ë—Ä–æ–Ω—Ö–∏—Ç", "–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è", "–ê—Ä–∏—Ç–º–∏—è", "–ü–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç",
            "–û—Ç–∏—Ç", "–¶–∏—Å—Ç–∏—Ç", "–ö–æ–Ω—ä—é–Ω–∫—Ç–∏–≤–∏—Ç", "–°–∏–Ω—É—Å–∏—Ç", "–ê—Ä—Ç—Ä–∏—Ç",
            "–≠–∫–∑–µ–º–∞", "–ì–µ–º–æ—Ä—Ä–æ–π", "–¢–æ–Ω–∑–∏–ª–ª–∏—Ç", "–ù–µ–≤—Ä–∞–ª–≥–∏—è", "–ú–∏–≥—Ä–µ–Ω—å",
            "–ü–∏–µ–ª–æ–Ω–µ—Ñ—Ä–∏—Ç", "–•–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç", "–ö–æ–ª–∏—Ç", "–§–∞—Ä–∏–Ω–≥–∏—Ç", "–ü—É–ª—å–ø–∏—Ç"
        ],
        "parts": [
            "–Ω–∞–¥–ø–æ—á–µ—á–Ω–∏–∫–æ–≤", "–ª–∏–º—Ñ–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã", "–ø–µ—á–µ–Ω–∏",
            "–ø–æ–¥–∂–µ–ª—É–¥–æ—á–Ω–æ–π –∂–µ–ª–µ–∑—ã", "–ø–æ—è—Å–Ω–∏—á–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞", "–≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏",
            "–≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–≤—è–∑–æ–∫", "—Å–µ–ª–µ–∑—ë–Ω–∫–∏", "–∂–µ–ª—á–Ω–æ–≥–æ –ø—É–∑—ã—Ä—è",
            "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–∏–ø–µ—Ä—Å—Ç–Ω–æ–π –∫–∏—à–∫–∏", "—Ç–∞–∑–æ–±–µ–¥—Ä–µ–Ω–Ω–æ–≥–æ —Å—É—Å—Ç–∞–≤–∞",
            "—Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ö–∞", "–∫–æ—Ä–Ω—è –∑—É–±–∞", "—à–µ–π–Ω—ã—Ö –ø–æ–∑–≤–æ–Ω–∫–æ–≤",
            "–ø–ª–µ—á–µ–≤–æ–≥–æ –Ω–µ—Ä–≤–∞", "–ª–∏–º—Ñ–æ—É–∑–ª–æ–≤", "–Ω–∞–¥–∫–æ–ª–µ–Ω–Ω–∏–∫–∞",
            "–º–µ–Ω–∏—Å–∫–∞", "–∞—Ö–∏–ª–ª–æ–≤–∞ —Å—É—Ö–æ–∂–∏–ª–∏—è", "–ø—Ä–µ–¥–ø–ª–µ—á—å—è"
        ],
        "severity": [
            "—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏", "—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã", "—Å —Ä–µ—Ü–∏–¥–∏–≤–∞–º–∏",
            "—Å —Ä–∏—Å–∫–æ–º –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π", "—Ç—Ä–µ–±—É—é—â–µ–µ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–∞",
            "—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π 38-39¬∞C", "—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç–∏",
            "—Å –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º", "—Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ä–æ–∑–∏–π",
            "—Å —Ä–∏—Å–∫–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É"
        ]
    },
    3: {
        "problems": [
            "–ò–Ω—Ñ–∞—Ä–∫—Ç –º–∏–æ–∫–∞—Ä–¥–∞", "–ò–Ω—Å—É–ª—å—Ç", "–û–Ω–∫–æ–ª–æ–≥–∏—è", "–°–µ–ø—Å–∏—Å",
            "–¢—Ä–æ–º–±–æ—ç–º–±–æ–ª–∏—è", "–ü–µ—Ä–∏—Ç–æ–Ω–∏—Ç", "–ú–µ–Ω–∏–Ω–≥–∏—Ç", "–ì–∞–Ω–≥—Ä–µ–Ω–∞",
            "–ü–æ—á–µ—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å", "–¶–∏—Ä—Ä–æ–∑ –ø–µ—á–µ–Ω–∏",
            "–õ–µ–π–∫–µ–º–∏—è", "–≠–Ω—Ü–µ—Ñ–∞–ª–∏—Ç", "–¢—É–±–µ—Ä–∫—É–ª—ë–∑", "–°–ü–ò–î",
            "–ë–æ–ª–µ–∑–Ω—å –ö—Ä–æ–Ω–∞", "–†–∞—Å—Å–µ—è–Ω–Ω—ã–π —Å–∫–ª–µ—Ä–æ–∑", "–ë–æ–∫–æ–≤–æ–π –∞–º–∏–æ—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–π —Å–∫–ª–µ—Ä–æ–∑",
            "–ú—É–∫–æ–≤–∏—Å—Ü–∏–¥–æ–∑", "–¢—è–∂—ë–ª—ã–π –æ—Å—Ç—Ä—ã–π –ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç", "–ö–∞—Ä–¥–∏–æ–≥–µ–Ω–Ω—ã–π —à–æ–∫"
        ],
        "parts": [
            "–∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã—Ö –∞—Ä—Ç–µ—Ä–∏–π", "—Å—Ç–≤–æ–ª–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–∑–≥–∞",
            "—Å–ø–∏–Ω–Ω–æ–≥–æ –º–æ–∑–≥–∞", "–ª—ë–≥–æ—á–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏", "–±—Ä—é—à–Ω–æ–π –∞–æ—Ä—Ç—ã",
            "–∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞", "–º–æ–∑–∂–µ—á–∫–∞", "–ø–µ—Ä–∏–∫–∞—Ä–¥–∞", 
            "–ø–æ–¥–∂–µ–ª—É–¥–æ—á–Ω–æ–π –∂–µ–ª–µ–∑—ã (–Ω–µ–∫—Ä–æ–∑)", "–ø–æ—á–µ—á–Ω—ã—Ö –∫–ª—É–±–æ—á–∫–æ–≤",
            "–ª–∏–º—Ñ–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã (–º–µ—Ç–∞—Å—Ç–∞–∑—ã)", "–≥–∏–ø–æ—Ñ–∏–∑–∞",
            "–º–µ–∂–ø–æ–∑–≤–æ–Ω–æ—á–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ (–∞–±—Å—Ü–µ—Å—Å)", "–ø–µ—á–µ–Ω–∏ (—Ü–∏—Ä—Ä–æ–∑)",
            "–ª—ë–≥–∫–∏—Ö (—Ñ–∏–±—Ä–æ–∑)", "—Å–µ–ª–µ–∑—ë–Ω–∫–∏ (—Ä–∞–∑—Ä—ã–≤)",
            "–Ω–∞–¥–ø–æ—á–µ—á–Ω–∏–∫–æ–≤ (–∫—Ä–æ–≤–æ–∏–∑–ª–∏—è–Ω–∏–µ)", "—â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã (–∞–Ω–∞–ø–ª–∞–∑–∏—è)",
            "–º–æ–∑–≥–æ–≤—ã—Ö –æ–±–æ–ª–æ—á–µ–∫", "—Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∫–ª–∞–ø–∞–Ω–æ–≤"
        ],
        "severity": [
            "—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏", "—Å –º–µ—Ç–∞—Å—Ç–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
            "—Å –ø–æ–ª–∏–æ—Ä–≥–∞–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å—é", "–Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Å –∂–∏–∑–Ω—å—é",
            "—Ç—Ä–µ–±—É—é—â–µ–µ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏–∏", "—Å –ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å—é 90%",
            "—Å –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–µ–π –æ—Ä–≥–∞–Ω–æ–≤", "—Å –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Å–µ–ø—Å–∏—Å–æ–º",
            "—Å —Ç–æ—Ç–∞–ª—å–Ω—ã–º –Ω–µ–∫—Ä–æ–∑–æ–º —Ç–∫–∞–Ω–µ–π", "—Å –æ—Ç–∫–∞–∑–æ–º –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"
        ]
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
pyro_client = Client(
    "my_pyro_session",
    api_id=int(API_ID),
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

class ChatManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–æ–≤"""
    def __init__(self):
        self.members = {}

    def _convert_chat_id(self, chat_id: int) -> int:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ID —á–∞—Ç–∞ –¥–ª—è Pyrogram"""
        try:
            if str(chat_id).startswith("-100"):
                return int(chat_id)
            if chat_id < 0:
                return int(f"-100{abs(chat_id)}")
            return chat_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ID: {str(e)}")
            return chat_id

    async def update_members(self, chat_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            pyro_chat_id = self._convert_chat_id(chat_id)
            logger.info(f"Original ID: {chat_id} -> Pyro ID: {pyro_chat_id}")

            async with pyro_client:
                members = []
                async for member in pyro_client.get_chat_members(pyro_chat_id):
                    user = member.user
                    if not user.is_bot:
                        members.append(user)
                
                self.members[chat_id] = members
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")

        except RPCError as e:
            error_msg = f"Pyrogram Error: {str(e)}"
            if "CHAT_ID_INVALID" in str(e):
                error_msg += f"\n‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞: {pyro_chat_id}"
            logger.error(error_msg)
            raise ValueError(error_msg)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            raise

chat_manager = ChatManager()

@dp.errors_handler(exception=TerminatedByOtherGetUpdates)
async def handle_terminated_error(update, error):
    logger.critical("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    await bot.close()
    await pyro_client.stop()
    sys.exit(1)

def generate_diagnosis(level: int) -> str:
    data = DIAGNOSIS_DATA.get(level, DIAGNOSIS_DATA[2])
    return (
        f"{random.choice(data['problems'])} "
        f"{random.choice(data['parts'])} "
        f"{random.choice(data['severity'])}"
    ).capitalize()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    text = (
        "üë®‚öïÔ∏è –ë–æ—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/diagnose [—É—Ä–æ–≤–µ–Ω—å] - –≤–∞—à –¥–∏–∞–≥–Ω–æ–∑\n"
        "/dg @—é–∑–µ—Ä [—É—Ä–æ–≤–µ–Ω—å] - –¥–∏–∞–≥–Ω–æ–∑ —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
        "/random_dg [—É—Ä–æ–≤–µ–Ω—å] - —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
        "/rf - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        "–£—Ä–æ–≤–Ω–∏: 1-3 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)"
    )
    await message.reply(text)

@dp.message_handler(commands=['rf'])
async def refresh(message: types.Message):
    try:
        chat_id = message.chat.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω ID —á–∞—Ç–∞: {chat_id}")
        
        await chat_manager.update_members(chat_id)
        members = chat_manager.members.get(chat_id, [])
        
        member_list = "\n".join([f"‚Ä¢ {m.username or m.first_name}" for m in members])
        await message.reply(f"üîÑ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}\n{member_list}")
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['diagnose'])
async def self_diagnose(message: types.Message):
    try:
        args = message.get_args().split()
        level = int(args[0]) if args else 2
        level = max(1, min(3, level))
        
        diagnosis = generate_diagnosis(level)
        await message.reply(f"ü©∫ –í–∞—à –¥–∏–∞–≥–Ω–æ–∑ (—É—Ä–æ–≤–µ–Ω—å {level}):\n{diagnosis}!")
    except:
        await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /diagnose [1-3]")

@dp.message_handler(commands=['dg'])
async def user_diagnose(message: types.Message):
    try:
        args = message.get_args().split()
        if not args:
            raise ValueError("–£–∫–∞–∂–∏—Ç–µ @username")
        
        target = args[0].lstrip('@').lower()
        level = int(args[1]) if len(args) > 1 else 2
        level = max(1, min(3, level))
        
        members = chat_manager.members.get(message.chat.id, [])
        user = next((u for u in members if u.username and u.username.lower() == target), None)
        
        if not user:
            raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        diagnosis = generate_diagnosis(level)
        await message.reply(
            f"üîç –î–∏–∞–≥–Ω–æ–∑ –¥–ª—è @{user.username}:\n"
            f"{diagnosis}!"
        )
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['random_dg'])
async def random_diagnose(message: types.Message):
    """–î–∏–∞–≥–Ω–æ–∑ —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É"""
    try:
        chat_id = message.chat.id
        args = message.get_args().split()
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        level = int(args[0]) if args and args[0].isdigit() else 2
        level = max(1, min(3, level))
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        members = chat_manager.members.get(chat_id, [])
        if not members:
            await message.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rf")
            return
            
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        random_user = random.choice(members)
        username = random_user.username or random_user.first_name
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ–∑
        diagnosis = generate_diagnosis(level)
        await message.reply(
            f"–£ @{username} {diagnosis}!"
        )
        
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def shutdown():
    await bot.close()
    await pyro_client.stop()

if __name__ == '__main__':
    try:
        executor.start_polling(
            dp,
            skip_updates=True,
            on_shutdown=shutdown,
            timeout=30,
            relax=0.5
        )
    except TerminatedByOtherGetUpdates:
        logger.critical("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞!")
        sys.exit(1)
    except Exception as e:
        logger.critical(f"–§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)
