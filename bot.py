import os
import random
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ChatMemberHandler,
    ChatJoinRequestHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")

DIAGNOSIS_DATA = {
    1: {
        "problems": ["–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ", "–ó—É–¥", "–ò–∫–æ—Ç–∞"],
        "parts": ["—É—Ö–∞", "–Ω–æ—Å–∞", "–ø–∞–ª—å—Ü–∞"],
        "severity": ["–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏"]
    },
    2: {
        "problems": ["–ü–∞—Ä–∞–ª–∏—á", "–ì–∞—Å—Ç—Ä–∏—Ç", "–ê—Ä–∏—Ç–º–∏—è"],
        "parts": ["—Ä–µ–±—Ä–∞", "–∫–æ–ª–µ–Ω–∞", "—Å–µ–ª–µ–∑—ë–Ω–∫–∏"],
        "severity": ["—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏"]
    },
    3: {
        "problems": ["–ì–∞–Ω–≥—Ä–µ–Ω–∞", "–î–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–¢—Ä–æ–º–±–æ–∑"],
        "parts": ["–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞", "–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã", "—è–∏—á–∫–∞"],
        "severity": ["—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏"]
    }
}

class ChatTracker:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    def __init__(self):
        self.chat_data = {}

    async def update_members(self, chat_id: int, bot):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ API"""
        try:
            members = []
            async for member in bot.get_chat_members(chat_id):
                if not member.user.is_bot:
                    members.append(member.user)
            self.chat_data[chat_id] = members
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")

    def get_random_member(self, chat_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        members = self.chat_data.get(chat_id, [])
        return random.choice(members) if members else None

tracker = ChatTracker()

async def handle_chat_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
    chat_id = update.effective_chat.id
    await tracker.update_members(chat_id, context.bot)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ"""
    chat_id = update.effective_chat.id
    await tracker.update_members(chat_id, context.bot)
    
    text = (
        "üë®‚öïÔ∏è –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –±–æ—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/diagnose [@—é–∑–µ—Ä] [—É—Ä–æ–≤–µ–Ω—å] - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑\n"
        "/dg [@—é–∑–µ—Ä] [—É—Ä–æ–≤–µ–Ω—å] - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/dg @user123 3\n"
        "/diagnose 2"
    )
    await update.message.reply_text(text)

async def diagnose_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–∏–∞–≥–Ω–æ–∑–∞"""
    try:
        chat = update.effective_chat
        args = context.args or []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞
        if chat.type not in ["group", "supergroup"]:
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        level = 2
        target_username = None
        
        for arg in args:
            if arg.startswith("@"):
                target_username = arg[1:]  # –£–±–∏—Ä–∞–µ–º @ –¥–ª—è –ø–æ–∏—Å–∫–∞
            elif arg.isdigit() and 1 <= int(arg) <= 3:
                level = int(arg)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_username:
            # –ü–æ–∏—Å–∫ –ø–æ username
            member = next(
                (m for m in tracker.chat_data.get(chat.id, []) 
                 if m.username and m.username.lower() == target_username.lower()),
                None
            )
            username = f"@{target_username}"
        else:
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
            member = tracker.get_random_member(chat.id)
            username = (
                f"@{member.username}" 
                if member and member.username 
                else (member.full_name if member else "–°–ª—É—á–∞–π–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫")
            )

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ–∑–∞
        data = DIAGNOSIS_DATA.get(level, DIAGNOSIS_DATA[2])
        diagnosis = (
            f"{random.choice(data['problems'])} "
            f"{random.choice(data['parts'])} "
            f"{random.choice(data['severity'])}"
        ).capitalize()

        await update.message.reply_text(
            f"üîç –î–∏–∞–≥–Ω–æ–∑ –¥–ª—è {username} (—É—Ä–æ–≤–µ–Ω—å {level}):\n"
            f"{diagnosis}!"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

def main():
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    handlers = [
        CommandHandler(["start", "help"], start),
        CommandHandler(["diagnose", "dg"], diagnose_command),
        ChatMemberHandler(handle_chat_updates),
        ChatJoinRequestHandler(handle_chat_updates)
    ]
    
    application.add_handlers(handlers)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES
    )

if __name__ == "__main__":
    if not TOKEN:
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN!")
        exit(1)
    main()
