import os
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

TOKEN = os.getenv('TELEGRAM_TOKEN')

DIAGNOSIS_DATA = {
    1: {
        'problems': ['–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ', '–ó—É–¥', '–ò–∫–æ—Ç–∞'],
        'parts': ['—É—Ö–∞', '–Ω–æ—Å–∞', '–ø–∞–ª—å—Ü–∞'],
        'severity': ['–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏']
    },
    2: {
        'problems': ['–ü–∞—Ä–∞–ª–∏—á', '–ì–∞—Å—Ç—Ä–∏—Ç', '–ê—Ä–∏—Ç–º–∏—è'],
        'parts': ['—Ä–µ–±—Ä–∞', '–∫–æ–ª–µ–Ω–∞', '—Å–µ–ª–µ–∑—ë–Ω–∫–∏'],
        'severity': ['—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏']
    },
    3: {
        'problems': ['–ì–∞–Ω–≥—Ä–µ–Ω–∞', '–î–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', '–¢—Ä–æ–º–±–æ–∑'],
        'parts': ['–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞', '–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã', '—è–∏—á–∫–∞'],
        'severity': ['—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏']
    }
}

async def get_members(chat_id, bot):
    members = []
    try:
        async for member in bot.get_chat_members(chat_id):
            if not member.user.is_bot:
                members.append(member.user)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
    return members

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü©∫ –ë–æ—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /diagnose [1-3]\n"
        "–ü—Ä–∏–º–µ—Ä: /diagnose 3"
    )

async def diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat = update.effective_chat
        if chat.type not in ['group', 'supergroup']:
            return

        members = await get_members(chat.id, context.bot)
        if not members:
            await update.message.reply_text("üò¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return

        user = random.choice(members)
        username = user.username or user.first_name
        level = int(context.args[0]) if context.args else 2
        level = max(1, min(3, level))

        data = DIAGNOSIS_DATA[level]
        diagnosis = (
            f"{random.choice(data['problems'])} "
            f"{random.choice(data['parts'])} "
            f"{random.choice(data['severity'])}"
        )

        await update.message.reply_text(
            f"üîç –î–∏–∞–≥–Ω–æ–∑ –¥–ª—è @{username}:\n"
            f"{diagnosis.capitalize()}!"
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("diagnose", diagnose))
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    if not TOKEN:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è TELEGRAM_TOKEN!")
        exit(1)
    main()
