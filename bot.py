import os
import random
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('BOT_TOKEN')

DIAGNOSIS_DATA = {
    1: {
        'problems': ['–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ', '–ó—É–¥', '–ò–∫–æ—Ç–∞'],
        'parts': ['—É—Ö–∞', '–Ω–æ—Å–∞', '–ø–∞–ª—å—Ü–∞'],
        'severity': ['–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏']
    },
    2: {
        'problems': ['–ü–∞—Ä–∞–ª–∏—á', '–ì–∞—Å—Ç—Ä–∏—Ç', '–ê—Ä–∏—Ç–º–∏—è'],
        'parts': ['—Ä–µ–±—Ä–∞', '–∫–æ–ª–µ–Ω–∞', '—Å–µ–ª–µ–∑—ë–Ω–∫–∏'],
        'severity': ['—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏']
    },
    3: {
        'problems': ['–ì–∞–Ω–≥—Ä–µ–Ω–∞', '–î–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', '–¢—Ä–æ–º–±–æ–∑'],
        'parts': ['–≥–∏–ø–æ—Ç–∞–ª–∞–º—É—Å–∞', '–Ω–∞–¥–∫–æ—Å—Ç–Ω–∏—Ü—ã', '—è–∏—á–∫–∞'],
        'severity': ['—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏']
    }
}

async def get_chat_members(bot, chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –¥–ª—è PTB 20.x"""
    try:
        members = []
        async for member in bot.get_chat_members(chat_id):
            if not member.user.is_bot:
                members.append(member.user)
        return members
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str(e)}")
        return []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üë®‚öïÔ∏è –ë–æ—Ç-–¥–∏–∞–≥–Ω–æ—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/diagnose [@—é–∑–µ—Ä] [—É—Ä–æ–≤–µ–Ω—å 1-3]\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/diagnose 2 - —Å–ª—É—á–∞–π–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
        "/diagnose @username 3"
    )

async def diagnose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diagnose"""
    try:
        chat = update.effective_chat
        args = context.args
        
        if chat.type not in ['group', 'supergroup']:
            await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return

        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        members = await get_chat_members(context.bot, chat.id)
        if not members:
            await update.message.reply_text("üò¢ –í —á–∞—Ç–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        level = 2
        target_user = None
        
        if args:
            # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            for i, arg in enumerate(args):
                if arg.startswith('@'):
                    username = arg[1:].lower()
                    target_user = next((u for u in members if u.username and u.username.lower() == username), None)
                    if target_user and len(args) > i+1:
                        try: level = int(args[i+1])
                        except: pass
                    break
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if not target_user:
                try: level = int(args[0])
                except: pass

        # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = target_user or random.choice(members)
        username = f"@{user.username}" if user.username else user.first_name

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ–∑–∞
        level = max(1, min(3, level))
        data = DIAGNOSIS_DATA[level]
        diagnosis = (
            f"{random.choice(data['problems'])} "
            f"{random.choice(data['parts'])} "
            f"{random.choice(data['severity'])}"
        ).capitalize()

        await update.message.reply_text(
            f"üîç –î–∏–∞–≥–Ω–æ–∑ –¥–ª—è {username} (—É—Ä–æ–≤–µ–Ω—å {level}):\n"
            f"{diagnosis}!"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("diagnose", diagnose))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    if not TOKEN:
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN!")
        exit(1)
    main()
